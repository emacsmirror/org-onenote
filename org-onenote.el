;;; org-onenote.el --- org-mode onenote API integration

;;; Commentary:
;; Export org-mode article to onenote.
;; Maybe integrate org-mode exporter framework if I have time.

(require 'oauth2)
(require 'request)
(require 'mailcap)			;for mime type detection
(require 'org-element)			;org element api
(require 'ox)				;org export api

;;; Code:

(defvar org-onenote-client-id "d6c99b4d-fda1-48f0-9e0f-22103e544413")

(defvar org-onenote-auth-url "https://login.live.com/oauth20_authorize.srf")

(defvar org-onenote-auth-implicit-grant-url "https://login.live.com/oauth20_desktop.srf")

;;; https://blogs.msdn.microsoft.com/onenotedev/2014/03/28/authenticating-with-the-org-onenote-apis/
(defvar org-onenote-auth-scope "wl.offline_access offline_access office.onenote_create office.onenote_update_by_app office.onenote_update office.onenote")

(defvar org-onenote-token-refresh-url "https://login.live.com/oauth20_token.srf")

(defvar org-onenote-token-refresh-type "application/x-www-form-urlencoded" )

;;; www prefix is required, otherwise will cause 301.
(defvar org-onenote-api-host "https://www.onenote.com/api");"https://private-anon-2d7c3b9948-onenote.apiary-proxy.com"

;;; resource paths

(defvar org-onenote-api-path-notebooks "/v1.0/me/notes/notebooks")

(defvar org-onenote-api-path-sections "/v1.0/me/notes/sections")

(defvar org-onenote-api-path-section-groups "/v1.0/me/notes/sectiongroups")

(defvar org-onenote-api-path-pages "/v1.0/me/notes/pages")

(defvar org-onenote-api-path-pages-post "/v1.0/me/notes/sections/%s/pages")

(defvar org-onenote-api-path-pages-delete "/v1.0/me/notes/pages/%s/")

(defvar *org-onenote-stored-token* nil)

;;; org stuff

(defconst org-onenote--keyword-section-name "ONENOTE-SECTION")

(defconst org-onenote--keyword-page-id "ONENOTE-PAGE-ID")

(defconst org-onenote--data-image-block-name "ONENOTE-ORG-IMG")

;;; custom variables

(defgroup org-onenote nil
  "Export org-mode buffers to onenote."
  :group 'applications
  :group 'org
  :prefix "org-onenote-")

(defcustom org-onenote-token-file
  (concat user-emacs-directory "org-onenote-oauth2.plstore")
  "Plstore to store onenote oauth2 token, also be used for token
  expiration detection based on file modification time. Will
  dynamic bind oauth2-token-file...")

(defcustom org-onenote-token-expire-time 4500
  "Default oauth2 refresh token expiration time.")


(defcustom org-onenote-section-map nil
  "Onenote section name-id mapping. Can be generated by call
  `onenote-build-section-map-from-response` or
  `onenote-insert-section-map-at-pt` to build"
  :type '(alist :value-type (group string)))

(defcustom org-onenote-html-template
  "<!DOCTYPE html>
<html>
    <head>
    <title>%s</title>
    <meta name=\"created\" content=\"%s\"/>
    </head>
    <body>
        <div data-id=\"main_content\">%s<div>
    </body>
</html>"
  "Html template.")

(defun org-onenote-start-authencate ()
  "Start OAuth2 authencate."
  (interactive)
  (let ((oauth2-token-file org-onenote-token-file))
   (setq *org-onenote-stored-token*
	 (oauth2-auth-and-store org-onenote-auth-url org-onenote-token-refresh-url org-onenote-auth-scope org-onenote-client-id nil org-onenote-auth-implicit-grant-url))))


(defun org-onenote-get-auth-token ()
  "Get raw auth token."
  (oauth2-token-access-token *org-onenote-stored-token*))

(defun org-onenote-may-refresh-token ()
  "Refresh token based on token store modification time."
  (let ((token-modify-time (nth 5(file-attributes org-onenote-token-file)))
	(now (current-time)))
    (when (time-less-p (time-add token-modify-time org-onenote-token-expire-time) now)
      (setq *org-onenote-stored-token* (oauth2-refresh-access *org-onenote-stored-token*)))))


(defun org-onenote-api-call (path &rest args)
  "Call onenote API."
  (org-onenote-may-refresh-token)
  (let ((headers (plist-get args  :headers))
	(bearer-header (oauth2-authz-bearer-header (org-onenote-get-auth-token)))) ;insert auth token

    (plist-put args :headers (push bearer-header headers ))
    (plist-put args :parser (or (plist-get args :parser) 'json-read))
    (apply #'request (concat org-onenote-api-host path) args)))


(defun org-onenote-build-section-map-from-response (response)
  "Build section map from RESPONSE.
Construct `(Notebook/[SectionGroup]/Section . Section-id)` like assoc list for section id lookup."
  (let ((data (assoc-default 'value response)))
    (mapcar
     (lambda (itm)
       (let ((id (assoc-default 'id itm))
	     (pname (assoc-default 'name (assoc-default 'parentNotebook itm)))
	     (gname (assoc-default 'name (assoc-default 'parentSectionGroup itm)))
	     (name (assoc-default 'name itm)))
	 
	 `(,(concat pname "/" (when gname (concat gname "/")) name) . ,id)))
     data)))


(defun org-onenote-insert-section-map-at-pt ()
  (interactive)
  "Insert section map at current point. You may use it as your config."

  (org-onenote-api-call org-onenote-api-path-sections
			:success
			(cl-function
			 (lambda
			   (&key data &allow-other-keys)
			   (prin1
			    (org-onenote-build-section-map-from-response data)
			    (current-buffer))))))


(defun org-onenote-get-section-id (name)
  "Get section id from `org-onenote-section-map` by NAME."
  (assoc-default name org-onenote-section-map))

;;; org stuff
(defun org-onenote-process-image ()
  (let ((re "<img\s*src=\"\\([^\"]+\\)\"")
	(start-index 0)
	ret '())
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward re nil t)
	(let ((src (match-string-no-properties 1))
	      (block-name (format "%s%d" org-onenote--data-image-block-name start-index)))
	  (save-match-data
	    (when (string-match "file:\\([^]]*\\)" src)
		(setq src (substring src 5))))
	  (when (file-exists-p src)
	    (setq src (expand-file-name src))
	    (replace-match (format "<img src=\"name:%s\"" block-name))
	    (setq ret (push `(,block-name . (,block-name :file ,src :mime-type ,(mailcap-extension-to-mime (file-name-extension src)))) ret))
	    (setq start-index (1+ start-index))))))
    ret))

(defun org-onenote-process-html ()
  "Must run inside org-export*."
  (let ()
    ))

(defun org-onenote-html-get-request-data ()
  "Export org-mode BUFFER to post data."
  (let ((org-export-show-temporary-export-buffer nil)
	(title (substring-no-properties
		(or (car (plist-get
			  (org-export-get-environment)
			  :title))
		    (file-name-nondirectory
		     (file-name-sans-extension
		      (buffer-file-name))))))
	(time (format-time-string "%Y-%m-%dT%T"))
	ret)
    (save-excursion
      (org-html-export-as-html nil nil t t '(:html-doctype "xhtml5"))
      (with-current-buffer "*Org HTML Export*"
	(setq ret (org-onenote-process-image))
	(setq ret
              (push `("Presentation" . ("Presentation"
					:data ,(format
						org-onenote-html-template
						title
						time
						(buffer-substring-no-properties
						 (point-min)
						 (point-max)))
					:mime-type "application/xhtml+xml"))
		    ret))
	(kill-buffer)))
    ret))


(defun org-onenote-get-keyword-val (key &optional buffer)
  "Get value from #+keyword."
  (with-current-buffer (or buffer (current-buffer))
    (let ((props (org-element-parse-buffer 'greater-element t)))
      (org-element-map props 'keyword
	(lambda (item)
	  (when (equal (org-element-property :key item)
		      key)
	      (org-element-property :value item)))))))

(defun org-onenote-set-keyword-val (key value &optional force)
  "Set value to keyword use FORCE when current buffer no such keyword."
  (let ((re "#\\+\\([^\:]+\\)\\:\s*\\(.*\\)$")
        found)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward re nil t)
        (when (string= (match-string 1) key)
          (setq found t)
          (replace-match (concat "#+\\1: " value))
          (goto-char (match-end 2))))
      (when (and (not found) force)
	(insert (format "\n#+%s: %s" key value))))))

(defun org-onenote-submit-done-callback (data)
  "Handle response DATA."
  (let ((id (assoc-default 'id data)))
    (if id
	(org-onenote-set-keyword-val
      org-onenote--keyword-page-id
      id t)
      (message "invalid response"))))

(defun org-onenote-submit-page ()
  (interactive)
  ;; if-let?
  (let* ((section-name (org-onenote-get-keyword-val org-onenote--keyword-section-name))
  	 (section-id (org-onenote-get-section-id (car section-name))))

    (when section-id
      (let* (
	     (files (org-onenote-html-get-request-data)))
  	(org-onenote-api-call
  	 (format org-onenote-api-path-pages-post section-id)
	 :type "POST"
  	 :success (cl-function (lambda (&key data &allow-other-keys)
	    (message "post success!")
	    (org-onenote-submit-done-callback data)))
  	 :error (cl-function (lambda (&key data &allow-other-keys)
	    (message "error!")
	    (print data)))
	 :files files)))))

(defun org-onenote-delete-page (&optional id)
  "Delete page from server by optional ID, default current page."
  (interactive)
  (let ((page-id (car (org-onenote-get-keyword-val org-onenote--keyword-page-id))))

    (when page-id
      (org-onenote-api-call
       (format org-onenote-api-path-pages-delete page-id)
       :type
       :success (cl-function (lambda (&key data &allow-other-keys)
	  (message "delete success!")
	  (org-onenote-set-keyword-val org-onenote--keyword-page-id nil)
	  ))
       :error (cl-function (lambda (&key data &allow-other-keys)
	  (message "error!")
	  (print data)))))))


(provide 'org-onenote)

;;; org-onenote.el ends here
